<?xml version="1.0" encoding="ASCII"?>
<function:functionModel xmlns:common="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:function="http://www.ibm.com/xmlns/prod/streams/spl/function">
  <function:functionSet>
    <function:headerFileName>Json.h</function:headerFileName>
    <function:cppNamespaceName>com::ibm::streamsx::json</function:cppNamespaceName>
    <function:functions>
      <function:function>
        <function:description>
Convert a tuple to JSON object encoded as a serialized JSON String. 
Blob, complex and xml values are converted to nulls. Timestamp is converted to a date string representation.
Optional attributes having null value are converted to null in JSON. 
@param t Tuple to be converted to JSON.
@return Tuple encoded as a serialized JSON object.
        </function:description>
        <function:prototype>&lt;tuple T> public rstring tupleToJSON(T t)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Convert a tuple to JSON object encoded as a serialized JSON String. Blob, complex and xml values are converted to nulls.
@param t Tuple to be converted to JSON.
@param prefixToIgnore rstring prefix to ignore in attribute name .
@return Tuple encoded as a serialized JSON object.
        </function:description>
        <function:prototype>&lt;tuple T> public rstring tupleToJSON(T t, rstring prefixToIgnore)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Convert a map to JSON object encoded as a serialized JSON string. Blob, complex and xml values are converted to nulls.
Timestamp is converted to a date string representation.
@param m Map containing key-value pairs to be converted to JSON.
@return Serialized JSON object containing all name-value pairs in `m`.
</function:description>
        <function:prototype>&lt;string S, any T> public rstring mapToJSON(map&lt;S, T> m)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Convert a map to JSON object encoded as a serialized JSON string. Blob, complex and xml values are converted to nulls.
@param m Map containing key-value pairs to be converted to JSON.
@param prefixToIgnore rstring prefix to ignore in attribute name .
@return Serialized JSON object containing all name-value pairs in `m`.
</function:description>
        <function:prototype>&lt;string S, any T> public rstring mapToJSON(map&lt;S, T> m, rstring prefixToIgnore)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Convert a value to JSON object with a single key encoded as a serialized JSON string. Blob, complex and xml values are converted to nulls.
An input value of type optional being null will generate also null in JSON.
@param key Key for name-value pair to be converted to JSON.
@param value Value for `key`.
@return Serialized JSON object containing single name-value pair.
</function:description>
        <function:prototype>&lt;string S, any T> public rstring toJSON(S key, T value)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Convert a value to JSON object with a single key encoded as a serialized JSON string. Blob, complex and xml values are converted to nulls.
@param key Key for name-value pair to be converted to JSON.
@param value Value for `key`.
@param prefixToIgnore rstring prefix to ignore in attribute name .
@return Serialized JSON object containing single name-value pair.
</function:description>
        <function:prototype>&lt;string S, any T> public rstring toJSON(S key, T value, rstring prefixToIgnore)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Extract values from JSON string accordingly to a given tuple.  Blob, complex, xml, timestamp and decimal type attributes are not supported.
Collections don't support nesting. 
Optional types are supported for primitive types and list and set of primitive types only. Optional bounded types are not supported. 
@param jsonString The input JSON string.
@param value A mutable tuple to save extracted values.
@return Reference to the input tuple.
</function:description>
        <function:prototype>&lt;tuple T> public T extractFromJSON(rstring jsonString, mutable T value)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Parse JSON string (used in conjunction with queryJSON function).
Threading limitations:
Call to parseJSON should not be placed in param section or state of the operator (internally a json object is shared via the thread local storage).
@param jsonString The input JSON string.
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return Error code (0 - no error).
</function:description>
        <function:prototype>&lt;enum E> public uint32 parseJSON(rstring jsonString, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Parse JSON string (used in conjunction with queryJSON function).
Threading limitations:
Call to parseJSON should not be placed in param section or state of the operator (internally a json object is shared via the thread local storage).
@param jsonString The input JSON string.
@param status indicates a status of the parser (enum JsonParseStatus.status).
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return Error code (0 - no error).
</function:description>
        <function:prototype>&lt;enum E> public boolean parseJSON(rstring jsonString, mutable JsonParseStatus.status status, mutable uint32 offset, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Get parse error string.
@param status a status of the parser to translate to a string.
@return Error string.
</function:description>
        <function:prototype>public rstring getParseError(JsonParseStatus.status status)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for boolean value with a given path (parseJSON function should be run before).
Threading limitations:
Call to queryJSON should not be placed in param section or state of the operator (internally a json object is shared via the thread local storage).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;enum E> public boolean queryJSON(rstring jsonPath, boolean defaultVal, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object value with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param status indicates a status of the query (enum JsonStatus.status). 
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;enum E> public boolean queryJSON(rstring jsonPath, boolean defaultVal, mutable JsonStatus.status status, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for integral value with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;integral T, enum E> public T queryJSON(rstring jsonPath, T defaultVal, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for integral value with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param status indicates a status of the query (enum JsonStatus.status). 
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;integral T, enum E> public T queryJSON(rstring jsonPath, T defaultVal, mutable JsonStatus.status status, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for floatingpoint value with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;floatingpoint T, enum E> public T queryJSON(rstring jsonPath, T defaultVal, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for floatingpoint value with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param status indicates a status of the query (enum JsonStatus.status). 
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;floatingpoint T, enum E> public T queryJSON(rstring jsonPath, T defaultVal, mutable JsonStatus.status status, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for string value with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;string T, enum E> public T queryJSON(rstring jsonPath, T defaultVal, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for string value with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param status indicates a status of the query (enum JsonStatus.status). 
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;string T, enum E> public T queryJSON(rstring jsonPath, T defaultVal, mutable JsonStatus.status status, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for list of booleans with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;enum E> public list&lt;boolean> queryJSON(rstring jsonPath, list&lt;boolean> defaultVal, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for list of booleans with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param status indicates a status of the query (enum JsonStatus.status). 
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;enum E> public list&lt;boolean> queryJSON(rstring jsonPath, list&lt;boolean> defaultVal, mutable JsonStatus.status status, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for list of integrals with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;integral T, enum E> public list&lt;T> queryJSON(rstring jsonPath, list&lt;T> defaultVal, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for list of integrals with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param status indicates a status of the query (enum JsonStatus.status). 
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;integral T, enum E> public list&lt;T> queryJSON(rstring jsonPath, list&lt;T> defaultVal, mutable JsonStatus.status status, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for list of floatingpoint values with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;floatingpoint T, enum E> public list&lt;T> queryJSON(rstring jsonPath, list&lt;T> defaultVal, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for list of floatingpoint values with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param status indicates a status of the query (enum JsonStatus.status). 
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;floatingpoint T, enum E> public list&lt;T> queryJSON(rstring jsonPath, list&lt;T> defaultVal, mutable JsonStatus.status status, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for list of strings with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;string T, enum E> public list&lt;T> queryJSON(rstring jsonPath, list&lt;T> defaultVal, E jsonIndex)</function:prototype>
      </function:function>
      <function:function>
        <function:description>
Query JSON object for list of strings with a given path (parseJSON function should be run before).
@param jsonPath Path to a JSON attribute.
@param defaultVal Default value to apply when an attribute not found.
@param status indicates a status of the query (enum JsonStatus.status). 
@param jsonIndex Json index of enum type (e.g. enum\{_1\}).
@return JSON value.
</function:description>
        <function:prototype>&lt;string T, enum E> public list&lt;T> queryJSON(rstring jsonPath, list&lt;T> defaultVal, mutable JsonStatus.status status, E jsonIndex)</function:prototype>
      </function:function>
    </function:functions>
    <function:dependencies>
      <function:library>
        <common:description></common:description>
        <common:managedLibrary>
          <common:includePath>../../impl/include</common:includePath>
        </common:managedLibrary>
      </function:library>
    </function:dependencies>
  </function:functionSet>
</function:functionModel>
