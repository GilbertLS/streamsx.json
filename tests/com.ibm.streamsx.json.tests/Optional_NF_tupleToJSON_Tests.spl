//
// *******************************************************************************
// * Copyright (C)2014, International Business Machines Corporation and *
// * others. All Rights Reserved. *
// *******************************************************************************
//
/*********************************************************************************
*
* This testsuite will test the C++ native  Functions of the streamsx.json toolkit
*
*
*       <tuple T> public rstring tupleToJSON(T t)
*
*********************************************************************************/
namespace com.ibm.streamsx.json.tests;
use com.ibm.streamsx.json::*;


type	FlatType = tuple <
	 	rstring rstringAtt, optional<rstring> rstringAttOptNull, optional<rstring> rstringAttOptVal,
		ustring ustringAtt, optional<ustring> ustringAttOptNull, optional<ustring> ustringAttOptVal,
		int8 int8Att, optional<int8> int8AttOptNull, optional<int8> int8AttOptVal,
		int16 int16Att, optional<int16> int16AttOptNull, optional<int16> int16AttOptVal,
		int32 int32Att, optional<int32> int32AttOptNull, optional<int32> int32AttOptVal,
		int64 int64Att, optional<int64> int64AttOptNull, optional<int64> int64AttOptVal,
		uint8 uint8Att, optional<uint8> uint8AttOptNull, optional<uint8> uint8AttOptVal,
		uint16 uint16Att, optional<uint16> uint16AttOptNull, optional<uint16> uint16AttOptVal,
		uint32 uint32Att, optional<uint32> uint32AttOptNull, optional<uint32> uint32AttOptVal,
		uint64 uint64Att, optional<uint64> uint64AttOptNull, optional<uint64> uint64AttOptVal,
		boolean booleanAtt, optional<boolean> booleanAttOptNull, optional<boolean> booleanAttOptVal,
		float32 float32Att, optional<float32> float32AttOptNull, optional<float32> float32AttOptVal,
		float64 float64Att, optional<float64> float64AttOptNull, optional<float64> float64AttOptVal,
		decimal32 decimal32Att, optional<decimal32> decimal32AttOptNull, optional<decimal32> decimal32AttOptVal,
		decimal64 decimal64Att, optional<decimal64> decimal64AttOptNull, optional<decimal64> decimal64AttOptVal,
		decimal128 decimal128Att, optional<decimal128> decimal128AttOptNull, optional<decimal128> decimal128AttOptVal
		//timestamp timestampAtt, optional<timestamp> timestampAttOptNull, optional<timestamp> timestampAttOptVal
		>;


type	ListType = 
		list<rstring> rstringList, optional<list<rstring>> rstringListOptNull,  optional<list<rstring>> rstringListOptVal,
		list<ustring> ustringList, optional<list<ustring>> ustringListOptNull,  optional<list<ustring>> ustringListOptVal,
		list<int8> int8List,  optional<list<int8>> int8ListOptNull, optional<list<int8>> int8ListOptVal,
		list<int16> int16List,  optional<list<int16>> int16ListOptNull, optional<list<int16>> int16ListOptVal,
		list<int32> int32List,  optional<list<int32>> int32ListOptNull, optional<list<int32>> int32ListOptVal,
		list<int64> int64List,  optional<list<int64>> int64ListOptNull, optional<list<int64>> int64ListOptVal,
		list<uint8> uint8List,  optional<list<uint8>> uint8ListOptNull, optional<list<uint8>> uint8ListOptVal,
		list<uint16> uint16List,  optional<list<uint16>> uint16ListOptNull, optional<list<uint16>> uint16ListOptVal,
		list<uint32> uint32List,  optional<list<uint32>> uint32ListOptNull, optional<list<uint32>> uint32ListOptVal,
		list<uint64> uint64List,  optional<list<uint64>> uint64ListOptNull, optional<list<uint64>> uint64ListOptVal,
		list<boolean> booleanList,  optional<list<boolean>> booleanListOptNull, optional<list<boolean>> booleanListOptVal,
		list<float32> float32List,  optional<list<float32>> float32ListOptNull, optional<list<float32>> float32ListOptVal,
		list<float64> float64List,  optional<list<float64>> float64ListOptNull, optional<list<float64>> float64ListOptVal,
		list<decimal32> decimal32List,  optional<list<decimal32>> decimal32ListOptNull, optional<list<decimal32>> decimal32ListOptVal,
		list<decimal64> decimal64List,  optional<list<decimal64>> decimal64ListOptNull, optional<list<decimal64>> decimal64ListOptVal,
		list<decimal128> decimal128List,  optional<list<decimal128>> decimal128ListOptNull, optional<list<decimal128>> decimal128ListOptVal;
		//list<timestamp> timestampList, optional<list<timestamp>> timestampListOptNull, optional<list<timestamp>> timestampListOptVal;

type	SetType = 
		set<rstring> rstringSet, optional<set<rstring>> rstringSetOptNull,  optional<set<rstring>> rstringSetOptVal,
		set<ustring> ustringSet, optional<set<ustring>> ustringSetOptNull,  optional<set<ustring>> ustringSetOptVal,
		set<int8> int8Set,  optional<set<int8>> int8SetOptNull, optional<set<int8>> int8SetOptVal,
		set<int16> int16Set,  optional<set<int16>> int16SetOptNull, optional<set<int16>> int16SetOptVal,
		set<int32> int32Set,  optional<set<int32>> int32SetOptNull, optional<set<int32>> int32SetOptVal,
		set<int64> int64Set,  optional<set<int64>> int64SetOptNull, optional<set<int64>> int64SetOptVal,
		set<uint8> uint8Set,  optional<set<uint8>> uint8SetOptNull, optional<set<uint8>> uint8SetOptVal,
		set<uint16> uint16Set,  optional<set<uint16>> uint16SetOptNull, optional<set<uint16>> uint16SetOptVal,
		set<uint32> uint32Set,  optional<set<uint32>> uint32SetOptNull, optional<set<uint32>> uint32SetOptVal,
		set<uint64> uint64Set,  optional<set<uint64>> uint64SetOptNull, optional<set<uint64>> uint64SetOptVal,
		set<boolean> booleanSet,  optional<set<boolean>> booleanSetOptNull, optional<set<boolean>> booleanSetOptVal,
		set<float32> float32Set,  optional<set<float32>> float32SetOptNull, optional<set<float32>> float32SetOptVal,
		set<float64> float64Set,  optional<set<float64>> float64SetOptNull, optional<set<float64>> float64SetOptVal,
		set<decimal32> decimal32Set,  optional<set<decimal32>> decimal32SetOptNull, optional<set<decimal32>> decimal32SetOptVal,
		set<decimal64> decimal64Set,  optional<set<decimal64>> decimal64SetOptNull, optional<set<decimal64>> decimal64SetOptVal,
		set<decimal128> decimal128Set,  optional<set<decimal128>> decimal128SetOptNull, optional<set<decimal128>> decimal128SetOptVal;
		//set<timestamp> timestampSet, optional<set<timestamp>> timestampSetOptNull, optional<set<timestamp>> timestampSetOptVal;


type	ListOfOptionalType= 
		list<rstring> rstringList, list<optional<rstring>> rstringListOptNull, list<optional<rstring>> rstringListOptVal, list<optional<rstring>> rstringListOptValMix,
		list<ustring> ustringList, list<optional<ustring>> ustringListOptNull, list<optional<ustring>> ustringListOptVal,list<optional<ustring>> ustringListOptValMix,
		list<int8> int8List, list<optional<int8>> int8ListOptNull, list<optional<int8>> int8ListOptVal,list<optional<int8>> int8ListOptValMix,
		list<int16> int16List, list<optional<int16>> int16ListOptNull, list<optional<int16>> int16ListOptVal,list<optional<int16>> int16ListOptValMix,
		list<int32> int32List, list<optional<int32>> int32ListOptNull, list<optional<int32>> int32ListOptVal,list<optional<int32>> int32ListOptValMix,
		list<int64> int64List, list<optional<int64>> int64ListOptNull, list<optional<int64>> int64ListOptVal,list<optional<int64>> int64ListOptValMix,
		list<uint8> uint8List, list<optional<uint8>> uint8ListOptNull, list<optional<uint8>> uint8ListOptVal,list<optional<uint8>> uint8ListOptValMix,
		list<uint16> uint16List, list<optional<uint16>> uint16ListOptNull, list<optional<uint16>> uint16ListOptVal,list<optional<uint16>> uint16ListOptValMix,
		list<uint32> uint32List, list<optional<uint32>> uint32ListOptNull, list<optional<uint32>> uint32ListOptVal,list<optional<uint32>> uint32ListOptValMix,
		list<uint64> uint64List, list<optional<uint64>> uint64ListOptNull, list<optional<uint64>> uint64ListOptVal,list<optional<uint64>> uint64ListOptValMix,
		list<boolean> booleanList, list<optional<boolean>> booleanListOptNull, list<optional<boolean>> booleanListOptVal,list<optional<boolean>> booleanListOptValMix,
		list<float32> float32List, list<optional<float32>> float32ListOptNull, list<optional<float32>> float32ListOptVal,list<optional<float32>> float32ListOptValMix,
		list<float64> float64List, list<optional<float64>> float64ListOptNull, list<optional<float64>> float64ListOptVal,list<optional<float64>> float64ListOptValMix,
		list<decimal32> decimal32List, list<optional<decimal32>> decimal32ListOptNull, list<optional<decimal32>> decimal32ListOptVal,list<optional<decimal32>> decimal32ListOptValMix,
		list<decimal64> decimal64List, list<optional<decimal64>> decimal64ListOptNull, list<optional<decimal64>> decimal64ListOptVal,list<optional<decimal64>> decimal64ListOptValMix,
		list<decimal128> decimal128List, list<optional<decimal128>> decimal128ListOptNull, list<optional<decimal128>> decimal128ListOptVal,list<optional<decimal128>> decimal128ListOptValMix;
		//list<timestamp> timestampList, list<optional<timestamp>> timestampListOptNull, list<optional<timestamp>> timestampListOptVal,list<optional<timestamp>> timestampListOptValMix;

type	SetOfOptionalType = 
		set<rstring> rstringSet, set<optional<rstring>> rstringSetOptNull, set<optional<rstring>> rstringSetOptVal, set<optional<rstring>> rstringSetOptValMix,
		set<ustring> ustringSet, set<optional<ustring>> ustringSetOptNull, set<optional<ustring>> ustringSetOptVal,set<optional<ustring>> ustringSetOptValMix,
		set<int8> int8Set, set<optional<int8>> int8SetOptNull, set<optional<int8>> int8SetOptVal,set<optional<int8>> int8SetOptValMix,
		set<int16> int16Set, set<optional<int16>> int16SetOptNull, set<optional<int16>> int16SetOptVal,set<optional<int16>> int16SetOptValMix,
		set<int32> int32Set, set<optional<int32>> int32SetOptNull, set<optional<int32>> int32SetOptVal,set<optional<int32>> int32SetOptValMix,
		set<int64> int64Set, set<optional<int64>> int64SetOptNull, set<optional<int64>> int64SetOptVal,set<optional<int64>> int64SetOptValMix,
		set<uint8> uint8Set, set<optional<uint8>> uint8SetOptNull, set<optional<uint8>> uint8SetOptVal,set<optional<uint8>> uint8SetOptValMix,
		set<uint16> uint16Set, set<optional<uint16>> uint16SetOptNull, set<optional<uint16>> uint16SetOptVal,set<optional<uint16>> uint16SetOptValMix,
		set<uint32> uint32Set, set<optional<uint32>> uint32SetOptNull, set<optional<uint32>> uint32SetOptVal,set<optional<uint32>> uint32SetOptValMix,
		set<uint64> uint64Set, set<optional<uint64>> uint64SetOptNull, set<optional<uint64>> uint64SetOptVal,set<optional<uint64>> uint64SetOptValMix,
		set<boolean> booleanSet, set<optional<boolean>> booleanSetOptNull, set<optional<boolean>> booleanSetOptVal,set<optional<boolean>> booleanSetOptValMix,
		set<float32> float32Set, set<optional<float32>> float32SetOptNull, set<optional<float32>> float32SetOptVal,set<optional<float32>> float32SetOptValMix,
		set<float64> float64Set, set<optional<float64>> float64SetOptNull, set<optional<float64>> float64SetOptVal,set<optional<float64>> float64SetOptValMix,
		set<decimal32> decimal32Set, set<optional<decimal32>> decimal32SetOptNull, set<optional<decimal32>> decimal32SetOptVal,set<optional<decimal32>> decimal32SetOptValMix,
		set<decimal64> decimal64Set, set<optional<decimal64>> decimal64SetOptNull, set<optional<decimal64>> decimal64SetOptVal,set<optional<decimal64>> decimal64SetOptValMix,
		set<decimal128> decimal128Set, set<optional<decimal128>> decimal128SetOptNull, set<optional<decimal128>> decimal128SetOptVal,set<optional<decimal128>> decimal128SetOptValMix;
		//set<timestamp> timestampSet, set<optional<timestamp>> timestampSetOptNull, set<optional<timestamp>> timestampSetOptVal,set<optional<timestamp>> timestampSetOptValMix;



type TupleType = 
		FlatType tupleAtt,
		optional<FlatType> tupleAttOptNull,
		optional<FlatType> tupleAttOptVal;



type ListOfTupleType = 
		list<FlatType> tupleList,
		optional<list<FlatType>> tupleListOptNull,
		optional<list<FlatType>> tupleListOptVal;

type SetOfTupleType = tuple<
		set<FlatType> tupleSet,
		optional<set<FlatType>> tupleSetOptNull,
		optional<set<FlatType>> tupleSetOptVal
		>;



/**********************************************************
* <tuple T> public rstring tupleToJSON(T t)
***********************************************************/
composite Optional_NF_tupleToJSON_BasicTest {


	graph
		stream<FlatType> TupleStream = Beacon() {
		param
			iterations : 1u;
		output TupleStream : 
			rstringAtt = "rStringValue", rstringAttOptNull = null, rstringAttOptVal = "rStringValue",
			ustringAtt = "uStringValue"u, ustringAttOptNull = null, ustringAttOptVal = "uStringValue"u,
			int8Att=10bs , int8AttOptNull=null , int8AttOptVal=-99bs,
			int16Att=10hs , int16AttOptNull=null , int16AttOptVal=-99hs,
			int32Att=10ws , int32AttOptNull=null , int32AttOptVal=-99ws,
			int64Att=10ls , int64AttOptNull=null , int64AttOptVal=-99ls,
			uint8Att=10bu , uint8AttOptNull=null , uint8AttOptVal=99bu,
			uint16Att=10hu , uint16AttOptNull=null , uint16AttOptVal=99hu,
			uint32Att=10wu , uint32AttOptNull=null , uint32AttOptVal=99wu,
			uint64Att=10lu , uint64AttOptNull=null , uint64AttOptVal=99lu,
			booleanAtt=true, booleanAttOptNull=null, booleanAttOptVal=true,
			float32Att=3.5wf,float32AttOptNull=null , float32AttOptVal=3.5wf,
			float64Att=3.5lf, float64AttOptNull=null ,  float64AttOptVal=3.5lf,
			decimal32Att=1.5wd, decimal32AttOptNull=null , decimal32AttOptVal=1.5wd,
			decimal64Att=1.5ld, decimal64AttOptNull=null , decimal64AttOptVal=1.5ld,
			decimal128Att=1.5qd, decimal128AttOptNull=null , decimal128AttOptVal=1.5qd;
			//the JSON toolkit native functions and TupleToJSON/JSONToTuple operator are incompatible
			//in timestamp respresentation in JSON
			//native functions respresent timestamp as a date string while the operatores respresent it
			//as a float value with nanoseconds in fractions
			//
			//on that reason we can't test one vs. the other
			//timestampAtt=fromDecimal128(1qd), timestampAttOptNull=null, timestampAttOptVal=fromDecimal128(1qd);
		}


		stream<rstring json> JsonStream = Functor(TupleStream as I ) {
		output JsonStream:
			json = tupleToJSON (I);
		}


		() as SinkOp = VerifierJTOT(JsonStream;TupleStream) {}

	config 
	  tracing : debug;
}

composite Optional_NF_tupleToJSON_OptionalListTest {



	graph
		stream<ListType> TupleStream = Beacon() {
		param
			iterations : 1u;
		output TupleStream : 
			rstringList=[ "a", "b", "c"] , rstringListOptNull=null, rstringListOptVal=[ "a", "b", "c"],
			ustringList=[ "a"u, "b"u, "c"u] , ustringListOptNull=null, ustringListOptVal=[ "a"u, "b"u, "c"u],
			int8List=[1bs,2bs,3bs],  int8ListOptNull=null, int8ListOptVal=[1bs,2bs,3bs],
			int16List=[1hs,2hs,3hs], int16ListOptNull=null, int16ListOptVal=[1hs,2hs,3hs],
			int32List=[1ws,2ws,3ws], int32ListOptNull=null, int32ListOptVal=[1ws,2ws,3ws],
			int64List=[1ls,2ls,3ls], int64ListOptNull=null, int64ListOptVal=[1ls,2ls,3ls],
			uint8List=[1bu,2bu,3bu], uint8ListOptNull=null, uint8ListOptVal=[1bu,2bu,3bu],
			uint16List=[1hu,2hu,3hu], uint16ListOptNull=null, uint16ListOptVal=[1hu,2hu,3hu],
			uint32List=[1wu,2wu,3wu], uint32ListOptNull=null, uint32ListOptVal=[1wu,2wu,3wu],
			uint64List=[1lu,2lu,3lu], uint64ListOptNull=null, uint64ListOptVal=[1lu,2lu,3lu],
			booleanList=[true,false,true], booleanListOptNull=null, booleanListOptVal=[true,false,true],
			float32List=[1.1wf,2.2wf,3.3wf], float32ListOptNull=null, float32ListOptVal=[1.1wf,2.2wf,3.3wf],
			float64List=[1.1lf,2.2lf,3.3lf], float64ListOptNull=null, float64ListOptVal=[1.1lf,2.2lf,3.3lf],
			decimal32List=[1.1wd,2.2wd,3.3wd], decimal32ListOptNull=null, decimal32ListOptVal=[1.1wd,2.2wd,3.3wd],
			decimal64List=[1.1ld,2.2ld,3.3ld], decimal64ListOptNull=null, decimal64ListOptVal=[1.1ld,2.2ld,3.3ld],
			decimal128List=[1.1qd,2.2qd,3.3qd], decimal128ListOptNull=null, decimal128ListOptVal=[1.1qd,2.2qd,3.3qd];
			//timestampList=[fromDecimal128(1qd),fromDecimal128(1qd)], timestampListOptNull=null, timestampListOptVal=[fromDecimal128(1qd),fromDecimal128(1qd)];
		}

		stream<rstring json> JsonStream = Functor(TupleStream as I ) {
		output JsonStream:
			json = tupleToJSON (I);
		}


		() as SinkOp = VerifierJTOT(JsonStream;TupleStream) {}

	config 
		tracing : debug;
		
}

composite Optional_NF_tupleToJSON_OptionalSetTest {


	graph
		stream<SetType> TupleStream = Beacon() {
		param
			iterations : 1u;
		output TupleStream : 
			rstringSet={ "a", "b", "c"} , rstringSetOptNull=null, rstringSetOptVal={ "a", "b", "c"},
			ustringSet={ "a"u, "b"u, "c"u} , ustringSetOptNull=null, ustringSetOptVal={ "a"u, "b"u, "c"u},
			int8Set={1bs,2bs,3bs},  int8SetOptNull=null, int8SetOptVal={1bs,2bs,3bs},
			int16Set={1hs,2hs,3hs}, int16SetOptNull=null, int16SetOptVal={1hs,2hs,3hs},
			int32Set={1ws,2ws,3ws}, int32SetOptNull=null, int32SetOptVal={1ws,2ws,3ws},
			int64Set={1ls,2ls,3ls}, int64SetOptNull=null, int64SetOptVal={1ls,2ls,3ls},
			uint8Set={1bu,2bu,3bu}, uint8SetOptNull=null, uint8SetOptVal={1bu,2bu,3bu},
			uint16Set={1hu,2hu,3hu}, uint16SetOptNull=null, uint16SetOptVal={1hu,2hu,3hu},
			uint32Set={1wu,2wu,3wu}, uint32SetOptNull=null, uint32SetOptVal={1wu,2wu,3wu},
			uint64Set={1lu,2lu,3lu}, uint64SetOptNull=null, uint64SetOptVal={1lu,2lu,3lu},
			booleanSet={true,false,true}, booleanSetOptNull=null, booleanSetOptVal={true,false,true},
			float32Set={1.1wf,2.2fw,3.3wf}, float32SetOptNull=null, float32SetOptVal={1.1wf,2.2wf,3.3wf},
			float64Set={1.1lf,2.2lf,3.3lf}, float64SetOptNull=null, float64SetOptVal={1.1lf,2.2lf,3.3lf},
			decimal32Set={1.1wd,2.2wd,3.3wd}, decimal32SetOptNull=null, decimal32SetOptVal={1.1wd,2.2wd,3.3wd},
			decimal64Set={1.1ld,2.2ld,3.3ld}, decimal64SetOptNull=null, decimal64SetOptVal={1.1ld,2.2ld,3.3ld},
			decimal128Set={1.1qd,2.2qd,3.3qd}, decimal128SetOptNull=null, decimal128SetOptVal={1.1qd,2.2qd,3.3qd};
			//timestampSet={fromDecimal128(1qd),fromDecimal128(1qd)}, timestampSetOptNull=null, timestampSetOptVal={fromDecimal128(1qd),fromDecimal128(1qd)};
		}

		stream<rstring json> JsonStream = Functor(TupleStream as I ) {
		output JsonStream:
			json = tupleToJSON (I);
		}


		() as SinkOp = VerifierJTOT(JsonStream;TupleStream) {}

	config 
		tracing : debug;
		
}


composite Optional_NF_tupleToJSON_ListOfOptionalTest {


	graph
		stream<ListOfOptionalType> TupleStream = Beacon() {
		param
			iterations : 1u;
		output TupleStream : 
			rstringList=[ "a", "b", "c"] , rstringListOptNull=[null,null,null], rstringListOptVal=[ "a", "b", "c"],  rstringListOptValMix=[ "a", null, "c"],
			ustringList=[ "a"u, "b"u, "c"u] , ustringListOptNull=[null,null,null], ustringListOptVal=[ "a"u, "b"u, "c"u], ustringListOptValMix=[ "a"u, null, "c"u],
			int8List=[1bs,2bs,3bs],  int8ListOptNull=[null,null,null], int8ListOptVal=[1bs,2bs,3bs], int8ListOptValMix=[ 1bs, null, 2bs],
			int16List=[1hs,2hs,3hs], int16ListOptNull=[null,null,null], int16ListOptVal=[1hs,2hs,3hs], int16ListOptValMix=[ 1hs, null, 2hs],
			int32List=[1ws,2ws,3ws], int32ListOptNull=[null,null,null], int32ListOptVal=[1ws,2ws,3ws], int32ListOptValMix=[ 1ws, null, 2ws],
			int64List=[1ls,2ls,3ls], int64ListOptNull=[null,null,null], int64ListOptVal=[1ls,2ls,3ls], int64ListOptValMix=[ 1ls, null, 2ls],
			uint8List=[1bu,2bu,3bu], uint8ListOptNull=[null,null,null], uint8ListOptVal=[1bu,2bu,3bu],  uint8ListOptValMix=[ 1bu, null, 2bu],
			uint16List=[1hu,2hu,3hu], uint16ListOptNull=[null,null,null], uint16ListOptVal=[1hu,2hu,3hu], uint16ListOptValMix=[ 1hu, null, 2hu],
			uint32List=[1wu,2wu,3wu], uint32ListOptNull=[null,null,null], uint32ListOptVal=[1wu,2wu,3wu], uint32ListOptValMix=[ 1wu, null, 2wu],
			uint64List=[1lu,2lu,3lu], uint64ListOptNull=[null,null,null], uint64ListOptVal=[1lu,2lu,3lu], uint64ListOptValMix=[ 1lu, null, 2lu],
			booleanList=[true,false,true], booleanListOptNull=[null,null,null], booleanListOptVal=[true,false,true], booleanListOptValMix=[ true, null, false],
			float32List=[1.1wf,2.2wf,3.3wf], float32ListOptNull=[null,null,null], float32ListOptVal=[1.1wf,2.2wf,3.3wf], float32ListOptValMix=[ 1.1wf, null, 2.2wf],
			float64List=[1.1lf,2.2lf,3.3lf], float64ListOptNull=[null,null,null], float64ListOptVal=[1.1lf,2.2lf,3.3lf], float64ListOptValMix=[ 1.1lf, null, 2.2lf],
			decimal32List=[1.1wd,2.2wd,3.3wd], decimal32ListOptNull=[null,null,null], decimal32ListOptVal=[1.1wd,2.2wd,3.3wd], decimal32ListOptValMix=[ 1.1wd, null, 2.2wd],
			decimal64List=[1.1ld,2.2ld,3.3ld], decimal64ListOptNull=[null,null,null], decimal64ListOptVal=[1.1ld,2.2ld,3.3ld], decimal64ListOptValMix=[ 1.1ld, null, 2.2ld],
			decimal128List=[1.1qd,2.2qd,3.3qd], decimal128ListOptNull=[null,null,null], decimal128ListOptVal=[1.1qd,2.2qd,3.3qd], decimal128ListOptValMix=[ 1.1qd, null, 2.2qd];
			//timestampList=[fromDecimal128(1qd), fromDecimal128(1qd)], timestampListOptNull=[null,null,null], timestampListOptVal=[fromDecimal128(1qd), fromDecimal128(1qd)], timestampListOptValMix=[fromDecimal128(1qd), null, fromDecimal128(1qd)];
		}

		stream<rstring json> JsonStream = Functor(TupleStream as I ) {
		output JsonStream:
			json = tupleToJSON (I);
		}


		() as SinkOp = VerifierJTOT(JsonStream;TupleStream) {}

	config 
		tracing : debug;
		
}


/*
Keep in mind!

JSON array conatining null which are mapped to SPL set attributes, will loose there null values. 
Null values in an unordered Collection make no sense in contrast to ordered Collection like List
where a null at a certain position gives information about the absense of the element at this position!

As SPL set allows setting of a NULL value (even if it makes no sense) the TupleToJson conversion 
will add the NULL to the resulting JSON array. But we don't do it vice versa, as underlying JAVA
HashSet doesn't support adding Null.
*/
composite Optional_NF_tupleToJSON_SetOfOptionalTest {


	graph
		stream<SetOfOptionalType> TupleStream = Beacon() {
		param
			iterations : 1u;
		output TupleStream : 
			rstringSet= {"a","b","c"} , rstringSetOptNull=(set<optional<rstring>>){}, rstringSetOptVal={ "a", "b", "c"},  rstringSetOptValMix={ "a", "c"},
			ustringSet={ "a"u, "b"u, "c"u} , ustringSetOptNull=(set<optional<ustring>>){}, ustringSetOptVal={ "a"u, "b"u, "c"u}, ustringSetOptValMix={ "a"u, "c"u},
			int8Set={1bs,2bs,3bs},  int8SetOptNull=(set<optional<int8>>){}, int8SetOptVal={1bs,2bs,3bs}, int8SetOptValMix={ 1bs, 2bs},
			int16Set={1hs,2hs,3hs}, int16SetOptNull=(set<optional<int16>>){}, int16SetOptVal={1hs,2hs,3hs}, int16SetOptValMix={ 1hs, 2hs},
			int32Set={1ws,2ws,3ws}, int32SetOptNull=(set<optional<int32>>){}, int32SetOptVal={1ws,2ws,3ws}, int32SetOptValMix={ 1ws, 2ws},
			int64Set={1ls,2ls,3ls}, int64SetOptNull=(set<optional<int64>>){}, int64SetOptVal={1ls,2ls,3ls}, int64SetOptValMix={ 1ls, 2ls},
			uint8Set={1bu,2bu,3bu}, uint8SetOptNull=(set<optional<uint8>>){}, uint8SetOptVal={1bu,2bu,3bu},  uint8SetOptValMix={ 1bu, 2bu},
			uint16Set={1hu,2hu,3hu}, uint16SetOptNull=(set<optional<uint16>>){}, uint16SetOptVal={1hu,2hu,3hu}, uint16SetOptValMix={ 1hu, 2hu},
			uint32Set={1wu,2wu,3wu}, uint32SetOptNull=(set<optional<uint32>>){}, uint32SetOptVal={1wu,2wu,3wu}, uint32SetOptValMix={ 1wu, 2wu},
			uint64Set={1lu,2lu,3lu}, uint64SetOptNull=(set<optional<uint64>>){}, uint64SetOptVal={1lu,2lu,3lu}, uint64SetOptValMix={ 1lu, 2lu},
			booleanSet={true,false,true}, booleanSetOptNull=(set<optional<boolean>>){}, booleanSetOptVal={true,false,true}, booleanSetOptValMix={ true, false},
			float32Set={1.1wf,2.2wf,3.3wf}, float32SetOptNull=(set<optional<float32>>){}, float32SetOptVal={1.1wf,2.2wf,3.3wf}, float32SetOptValMix={ 1.1wf, 2.2wf},
			float64Set={1.1lf,2.2lf,3.3lf}, float64SetOptNull=(set<optional<float64>>){}, float64SetOptVal={1.1lf,2.2lf,3.3lf}, float64SetOptValMix={ 1.1lf, 2.2lf},
			decimal32Set={1.1wd,2.2wd,3.3wd}, decimal32SetOptNull=(set<optional<decimal32>>){}, decimal32SetOptVal={1.1wd,2.2wd,3.3wd}, decimal32SetOptValMix={ 1.1wd, 2.2wd},
			decimal64Set={1.1ld,2.2ld,3.3ld}, decimal64SetOptNull=(set<optional<decimal64>>){}, decimal64SetOptVal={1.1ld,2.2ld,3.3ld}, decimal64SetOptValMix={ 1.1ld, 2.2ld},
			decimal128Set={1.1qd,2.2qd,3.3qd}, decimal128SetOptNull=(set<optional<decimal128>>){}, decimal128SetOptVal={1.1qd,2.2qd,3.3qd}, decimal128SetOptValMix={ 1.1qd, 2.2qd};
			//timestampSet={fromDecimal128(1qd),fromDecimal128(1qd)}, timestampSetOptNull=(set<optional<timestamp>>){}, timestampSetOptVal={fromDecimal128(1qd),fromDecimal128(1qd)}, timestampSetOptValMix={fromDecimal128(1qd),fromDecimal128(1qd)};
		}

		stream<rstring json> JsonStream = Functor(TupleStream as I ) {
		output JsonStream:
			json = tupleToJSON (I);
		}


		() as SinkOp = VerifierJTOT(JsonStream;TupleStream) {}

	config 
		tracing : debug;
		
}

composite Optional_NF_tupleToJSON_BasicTupleTest {


	graph
		(stream<TupleType> TupleStream)  as MyBeaconOperator= Beacon() {
		logic 
			state:
			mutable FlatType myTupleVal = {
				rstringAtt = "rStringValue", rstringAttOptNull = null, rstringAttOptVal = "rStringValue",
				ustringAtt = "uStringValue"u, ustringAttOptNull = null, ustringAttOptVal = "uStringValue"u,
				int8Att=10bs , int8AttOptNull=null , int8AttOptVal=-99bs,
				int16Att=10hs , int16AttOptNull=null , int16AttOptVal=-99hs,
				int32Att=10ws , int32AttOptNull=null , int32AttOptVal=-99ws,
				int64Att=10ls , int64AttOptNull=null , int64AttOptVal=-99ls,
				uint8Att=10bu , uint8AttOptNull=null , uint8AttOptVal=99bu,
				uint16Att=10hu , uint16AttOptNull=null , uint16AttOptVal=99hu,
				uint32Att=10wu , uint32AttOptNull=null , uint32AttOptVal=99wu,
				uint64Att=10lu , uint64AttOptNull=null , uint64AttOptVal=99lu,
				booleanAtt=true, booleanAttOptNull=null, booleanAttOptVal=true,
				float32Att=3.5wf,float32AttOptNull=null , float32AttOptVal=3.5wf,
				float64Att=3.5lf, float64AttOptNull=null ,  float64AttOptVal=3.5lf,
				decimal32Att=1.5wd, decimal32AttOptNull=null , decimal32AttOptVal=1.5wd,
				decimal64Att=1.5ld, decimal64AttOptNull=null , decimal64AttOptVal=1.5ld,
				decimal128Att=1.5qd, decimal128AttOptNull=null , decimal128AttOptVal=1.5qd
				//timestampAtt=fromDecimal128(1qd), timestampAttOptNull=null, timestampAttOptVal=fromDecimal128(1qd)
				};
		param
			iterations : 1u;

		output TupleStream : 
			tupleAtt = myTupleVal,
			tupleAttOptNull = null,
			tupleAttOptVal = myTupleVal;

		}

		(stream<rstring json> JsonStream) as MyFunctorOperator= Functor(TupleStream as I ) {
		output JsonStream:
			json = tupleToJSON (I);
		}

		() as MyVerifierJTOTOperator = VerifierJTOT(JsonStream;TupleStream) {}


	config 
	  tracing : debug;
}

composite Optional_NF_tupleToJSON_OptionalListOfTupleTest {


	graph
		stream<ListOfTupleType> TupleStream = Beacon() {
		logic 
			state:
			mutable FlatType myTupleVal = {
				rstringAtt = "rStringValue", rstringAttOptNull = null, rstringAttOptVal = "rStringValue",
				ustringAtt = "uStringValue"u, ustringAttOptNull = null, ustringAttOptVal = "uStringValue"u,
				int8Att=10bs , int8AttOptNull=null , int8AttOptVal=-99bs,
				int16Att=10hs , int16AttOptNull=null , int16AttOptVal=-99hs,
				int32Att=10ws , int32AttOptNull=null , int32AttOptVal=-99ws,
				int64Att=10ls , int64AttOptNull=null , int64AttOptVal=-99ls,
				uint8Att=10bu , uint8AttOptNull=null , uint8AttOptVal=99bu,
				uint16Att=10hu , uint16AttOptNull=null , uint16AttOptVal=99hu,
				uint32Att=10wu , uint32AttOptNull=null , uint32AttOptVal=99wu,
				uint64Att=10lu , uint64AttOptNull=null , uint64AttOptVal=99lu,
				booleanAtt=true, booleanAttOptNull=null, booleanAttOptVal=true,
				float32Att=3.5wf,float32AttOptNull=null , float32AttOptVal=3.5wf,
				float64Att=3.5lf, float64AttOptNull=null ,  float64AttOptVal=3.5lf,
				decimal32Att=1.5wd, decimal32AttOptNull=null , decimal32AttOptVal=1.5wd,
				decimal64Att=1.5ld, decimal64AttOptNull=null , decimal64AttOptVal=1.5ld,
				decimal128Att=1.5qd, decimal128AttOptNull=null , decimal128AttOptVal=1.5qd
				//timestampAtt=fromDecimal128(1qd), timestampAttOptNull=null, timestampAttOptVal=fromDecimal128(1qd)
				};
		param
			iterations : 1u;

		output TupleStream : 
			tupleList = [myTupleVal,myTupleVal,myTupleVal],
			tupleListOptNull = null,
			tupleListOptVal = [myTupleVal,myTupleVal,myTupleVal];

		}

		stream<rstring json> JsonStream = Functor(TupleStream as I ) {
		output JsonStream:
			json = tupleToJSON (I);
		}


		() as SinkOp = VerifierJTOT(JsonStream;TupleStream) {}

	config 
	  tracing : debug;
}


composite Optional_NF_tupleToJSON_OptionalSetOfTupleTest {


	graph
		stream<SetOfTupleType> TupleStream = Beacon() {
		logic 
			state: 
			{
			mutable FlatType myTupleVal1 = {
				rstringAtt = "rStringValue", rstringAttOptNull = null, rstringAttOptVal = "rStringValue",
				ustringAtt = "uStringValue"u, ustringAttOptNull = null, ustringAttOptVal = "uStringValue"u,
				int8Att=10bs , int8AttOptNull=null , int8AttOptVal=-99bs,
				int16Att=10hs , int16AttOptNull=null , int16AttOptVal=-99hs,
				int32Att=10ws , int32AttOptNull=null , int32AttOptVal=-99ws,
				int64Att=10ls , int64AttOptNull=null , int64AttOptVal=-99ls,
				uint8Att=10bu , uint8AttOptNull=null , uint8AttOptVal=99bu,
				uint16Att=10hu , uint16AttOptNull=null , uint16AttOptVal=99hu,
				uint32Att=10wu , uint32AttOptNull=null , uint32AttOptVal=99wu,
				uint64Att=10lu , uint64AttOptNull=null , uint64AttOptVal=99lu,
				booleanAtt=true, booleanAttOptNull=null, booleanAttOptVal=true,
				float32Att=3.5wf,float32AttOptNull=null , float32AttOptVal=3.5wf,
				float64Att=3.5lf, float64AttOptNull=null ,  float64AttOptVal=3.5lf,
				decimal32Att=1.5wd, decimal32AttOptNull=null , decimal32AttOptVal=1.5wd,
				decimal64Att=1.5ld, decimal64AttOptNull=null , decimal64AttOptVal=1.5ld,
				decimal128Att=1.5qd, decimal128AttOptNull=null , decimal128AttOptVal=1.5qd
				//timestampAtt=fromDecimal128(1qd), timestampAttOptNull=null, timestampAttOptVal=fromDecimal128(1qd)
				};
			/*
			 * just changing rstringAtt to a different value for a different tuple value to be inserted into set
			 */
			mutable FlatType myTupleVal2 = {
				rstringAtt = "rStringValue2", rstringAttOptNull = null, rstringAttOptVal = "rStringValue",
				ustringAtt = "uStringValue"u, ustringAttOptNull = null, ustringAttOptVal = "uStringValue"u,
				int8Att=10bs , int8AttOptNull=null , int8AttOptVal=-99bs,
				int16Att=10hs , int16AttOptNull=null , int16AttOptVal=-99hs,
				int32Att=10ws , int32AttOptNull=null , int32AttOptVal=-99ws,
				int64Att=10ls , int64AttOptNull=null , int64AttOptVal=-99ls,
				uint8Att=10bu , uint8AttOptNull=null , uint8AttOptVal=99bu,
				uint16Att=10hu , uint16AttOptNull=null , uint16AttOptVal=99hu,
				uint32Att=10wu , uint32AttOptNull=null , uint32AttOptVal=99wu,
				uint64Att=10lu , uint64AttOptNull=null , uint64AttOptVal=99lu,
				booleanAtt=true, booleanAttOptNull=null, booleanAttOptVal=true,
				float32Att=3.5wf,float32AttOptNull=null , float32AttOptVal=3.5wf,
				float64Att=3.5lf, float64AttOptNull=null ,  float64AttOptVal=3.5lf,
				decimal32Att=1.5wd, decimal32AttOptNull=null , decimal32AttOptVal=1.5wd,
				decimal64Att=1.5ld, decimal64AttOptNull=null , decimal64AttOptVal=1.5ld,
				decimal128Att=1.5qd, decimal128AttOptNull=null , decimal128AttOptVal=1.5qd
				//timestampAtt=fromDecimal128(1qd), timestampAttOptNull=null, timestampAttOptVal=fromDecimal128(1qd)
				};
			}

		param
			iterations : 1u;

		output TupleStream : 
			tupleSet = {myTupleVal1,myTupleVal2},
			tupleSetOptNull = null,
			tupleSetOptVal = {myTupleVal1,myTupleVal2};

		}

		stream<rstring json> JsonStream = Functor(TupleStream as I ) {
		output JsonStream:
			json = tupleToJSON (I);
		}


		() as JavaOperatorVerify = VerifierJTOT(JsonStream;TupleStream) {}

	config 
	  tracing : debug;
}

